@using NasaChallenge2024.Definitions.Models
@inject HttpClient Http

<div class="info-table floating-left">
    @if (_infos == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        foreach (var info in _infos)
        {
            switch (info)
            {
                case LinkInfoTableRow linkInfoTableRow:
                    <div class="info-rows-divider"></div>
                    <div class="info-table-row">
                        <div class="info-table-cell title">
                            @linkInfoTableRow.Title
                            <button class="info-table-cell button">
                                <img src="images/ic_question.svg"/>
                            </button>
                        </div>
                        <a class="info-table-cell value" href="@linkInfoTableRow.Link">
                            @linkInfoTableRow.Value
                            <img src="images/ic_arrow_up_right.svg">
                        </a>
                    </div>
                    
                    break;
                case StatusInfoTableRow statusInfoTableRow:
                    <div class="info-rows-divider"></div>
                    <div class="info-table-row">
                        <div class="info-table-cell title">
                            @statusInfoTableRow.Title
                            <button class="info-table-cell button">
                                <img src="images/ic_question.svg"/>
                            </button>
                        </div>
                        <div class="info-table-cell value">
                            <img class="info-table-cell image" src="images/ic_seal_check.svg"/>
                            @statusInfoTableRow.Value
                        </div>
                    </div>
                    
                    break;
                case InfoTableRow infoTableRow:
                        <div class="info-rows-divider"></div>
                        <div class="info-table-row">
                            <div class="info-table-cell title">
                                @infoTableRow.Title
                                <button class="info-table-cell button">
                                    <img src="images/ic_question.svg"/>
                                </button>
                            </div>
                            <p class="info-table-cell value">@infoTableRow.Value</p>
                        </div>
                    
                        break;
                default:
                    <div class="info-table-row">
                        <p class="info-table-cell title">@info.Title</p>
                        <p class="info-table-cell value">@info.Value</p>
                    </div>
                    
                    break;
            }
        }
    }
</div>

@code{
    private TableRow[] _infos;
    
    protected override async Task OnInitializedAsync()
    {
        var exoplanet = (await Http.GetFromJsonAsync<Exoplanet[]>("jsons/exoplanets.json")).FirstOrDefault();

        if (exoplanet?.HostStarIds?.FirstOrDefault() is { } starId)
        {
            var star = (await Http.GetFromJsonAsync<Star[]>("jsons/stars.json")).FirstOrDefault(s => s.Id == starId);

            if (exoplanet.TelescopeIds?.FirstOrDefault() is { } telescopeId)
            {
                var telescope = (await Http.GetFromJsonAsync<Telescope[]>("jsons/telescopes.json")).FirstOrDefault(t => t.Id == telescopeId);
                
                UpdateInfo(exoplanet, star, null, telescope);
                
                return;
            }
            
            if (exoplanet.ObservatoryIds?.FirstOrDefault() is { } observatoryId)
            {
                var observatory = (await Http.GetFromJsonAsync<Observatory[]>("jsons/observatories.json")).FirstOrDefault(t => t.Id == observatoryId);
                
                UpdateInfo(exoplanet, star, observatory, null);
            }
        }
    }

    public void UpdateInfo(Exoplanet exoplanet, Star star, Observatory observatory, Telescope telescope)
    {
        _infos = new[]
        {
            new TableRow
            {
                Title = "Planet Name",
                Value = exoplanet.Name,
            },
            new LinkInfoTableRow
            {
                Title = "Host Name",
                Value = star.Name
            },
            new InfoTableRow
            {
                Title = "Number of Planet",
                Value = star.ExoplanetIds.Count().ToString(),
            },
            new StatusInfoTableRow
            {
                Title = "Status",
                Value = "Published Confirmed",
            },
            new InfoTableRow
            {
                Title = "Stellar Radius [Solar Radius]",
                Value = star.SunRadius.ToString(),
            },
            new InfoTableRow
            {
                Title = "Stellar Mass [Solar Mass]",
                Value = star.SunMass.ToString(),
            },
            new InfoTableRow
            {
                Title = "Detected by",
                Value = exoplanet.DetectionMethod,
            },
            new LinkInfoTableRow
            {
                Title = "Observed by",
                Value = observatory?.Name ?? telescope?.Name,
            },
        };
        
        StateHasChanged();
    }

    private class TableRow
    {
        public string Title { get; set; }

        public string Value { get; set; }
    }

    private class InfoTableRow : TableRow
    {
        public string Info { get; set; }
    }
    
    private class LinkInfoTableRow : InfoTableRow
    {
        public string Link { get; set; }
    }
    
    private class StatusInfoTableRow : InfoTableRow
    {
    }
}