@page "/"
@using NasaChallenge2024.Definitions.Models
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<PageTitle>Main</PageTitle>

<div class="user-panel">
    <button class="vr-button">
        <div class="vr"><img class="visor" src="images/visor.svg" alt="visor" />VR Mode</div>
    </button>
    <div id="ui-switch">
        <label class="ui-text">UI</label>
        <label class="switch">
            <input type="checkbox" checked="@isUIChecked" @oninput="UICheckboxChanged">
            <span class="slider"></span>
        </label>
    </div>
    <div class="user">
        MISTER TURBO
        <div class="progress-bar-container">
            <div class="progress-bar-indicator" style="width:60%"></div>
        </div>
    </div>
    <div class="avatar">
        <img src="images/avatar.svg" alt="avatar" />
        <div class="score">654</div>
    </div>
</div>

<div class="menu @UIVisibility">
    <button class="menu-item" autofocus><img class="planets" src="images/planet.svg" alt="planet" />Planets</button>
    <button class="menu-item"><img class="flyingSaucer" src="images/flyingSaucer.svg"
            alt="flyingSaucer" />Observatories</button>
</div>

<div class="object-panel @UIVisibility">

</div>

<div class="bottom-panels @UIVisibility">
    <div class="bottom-panels-item-1">
        <label class="bottom-panels-item-number">@DiscoveryYear</label>
        <label class="bottom-panels-item-description">discovery year</label>
    </div>
    <div class="bottom-panels-item-2"><label class="bottom-panels-item-number">@OrbitalRadius</label>
        <label class="bottom-panels-item-description">orbital radius (AU)</label>
    </div>
    <div class="bottom-panels-item-3"><label class="bottom-panels-item-number">@OrbitalPeriod</label>
        <label class="bottom-panels-item-description">orbital period (days)</label>
    </div>
</div>


@code
{
    private IJSObjectReference _mainJsModule;

    //var exoplanets = await Http.GetFromJsonAsync<Exoplanet[]>("jsons/exoplanets.json");
    //var observatories = await Http.GetFromJsonAsync<Observatory[]>("jsons/observatories.json");
    //var starts = await Http.GetFromJsonAsync<Star[]>("jsons/stars.json");
    //var telescopes = await Http.GetFromJsonAsync<Telescope[]>("jsons/telescopes.json");
    //var travelTypes = await Http.GetFromJsonAsync<TravelType[]>("jsons/travel-types.json");

    public uint DiscoveryYear { get; set; } = 2014;

    public float OrbitalRadius { get; set; } = 0.7048f;

    public float OrbitalPeriod {get;set;} = 228.8f;



    [Parameter]
    public bool IsUIChecked { get; set; } = true;
    private bool isUIChecked;
    private string UIVisibility;



    protected override void OnParametersSet()
    {
        isUIChecked = this.IsUIChecked;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _mainJsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/main.js");
        await _mainJsModule.InvokeVoidAsync("hello");
    }

    private void UICheckboxChanged(ChangeEventArgs e)
    {
        var value = e.Value;
        this.UIVisibility = (bool)value == false ? "invisible" : string.Empty;
    }


}