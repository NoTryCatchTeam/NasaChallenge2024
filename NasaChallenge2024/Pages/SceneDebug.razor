@page "/scene-debug"
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

<h3 style="color: #fff">SceneDebug</h3>

<button @onclick="ShowExoplanetSystemAsync" style="color: #fff; pointer-events: all;">Show exoplanet system</button>

<button @onclick="ShowSolarSystemAsync" style="color: #fff; pointer-events: all;">Show solar system</button>

@code
{
    private IJSObjectReference _mainJsModule;
    private int _exoplanetIterator = 2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _mainJsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scene.js");
        await _mainJsModule.InvokeVoidAsync("initScene", "#scene-canvas", true);
    }

    private async Task ShowExoplanetSystemAsync()
    {
        var planets = await HttpClient.GetFromJsonAsync<Planet[]>("jsons/exoplanets.json");
        var stars = await HttpClient.GetFromJsonAsync<Star[]>("jsons/stars.json");

        var planetData = planets.ElementAt(_exoplanetIterator++);
        var star = stars.First(x => x.Id == planetData.HostStars.First());

        await _mainJsModule.InvokeVoidAsync(
        "showExoplanetSystemAsync",
        JsonSerializer.Serialize(new ExoplanetData
            {
                Planet = new ExoplanetData.PlanetData
                {
                    Id = planetData.Id,
                    Name = planetData.Name,
                    OrbitalRadius = planetData.OrbitalRadius,
                    EarthRadius = planetData.EarthRadius,
                    Texture = planetData.Texture,
                },
                Star = new ExoplanetData.StarData
                {
                    Id = star.Id,
                    Name = star.Name,
                    SunRadius = star.SunRadius,
                    Texture = star.Texture,
                }
            }),
        true);

        if (_exoplanetIterator == planets.Count() - 1)
        {
            _exoplanetIterator = 2;
        }
    }

    private async Task ShowSolarSystemAsync()
    {
        await _mainJsModule.InvokeVoidAsync("showSolarSystemAsync", true);
    }

    private class Planet
    {
        public int Id { get; set; }

        public string Name { get; set; }

        [JsonPropertyName("orbital_radius")]
        public float OrbitalRadius { get; set; }

        [JsonPropertyName("earth_radius")]
        public float EarthRadius { get; set; }

        [JsonPropertyName("host_stars_ids")]
        public IEnumerable<int> HostStars { get; set; }

        [JsonPropertyName("texture_path")]
        public string Texture { get; set; }
    }

    private class Star
    {
        public int Id { get; set; }

        public string Name { get; set; }

        [JsonPropertyName("sun_radius")]
        public float SunRadius { get; set; }

        [JsonPropertyName("texture_path")]
        public string Texture { get; set; }
    }

    private class ExoplanetData
    {
        public StarData Star;

        public PlanetData Planet;

        public class StarData
        {
            public int Id { get; set; }

            public string Name { get; set; }

            public float SunRadius { get; set; }

            public string Texture { get; set; }
        }

        public class PlanetData
        {
            public int Id { get; set; }

            public string Name { get; set; }

            public float EarthRadius { get; set; }

            public string Texture { get; set; }

            public float OrbitalRadius { get; set; }
        }
    }
}