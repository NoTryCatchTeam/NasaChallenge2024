@page "/scene-debug"
@using NasaChallenge2024.Definitions.Models
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

<h3 style="color: #fff">SceneDebug</h3>

<button @onclick="ShowExoplanetSystemAsync" style="color: #fff; pointer-events: all;">Show exoplanet system</button>

<button @onclick="ShowSolarSystemAsync" style="color: #fff; pointer-events: all;">Show solar system</button>

@code
{
    private IJSObjectReference _mainJsModule;
    private int _exoplanetIterator = 2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _mainJsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scene.js");
        await _mainJsModule.InvokeVoidAsync("initScene", "#scene-canvas", true);
    }

    private async Task ShowExoplanetSystemAsync()
    {
        var planets = await HttpClient.GetFromJsonAsync<Exoplanet[]>("jsons/exoplanets.json");
        var stars = await HttpClient.GetFromJsonAsync<Star[]>("jsons/stars.json");

        var planetData = planets.ElementAt(_exoplanetIterator);
        var star = stars.First(x => x.Id == planetData.HostStarIds.First());

        var systemData = new ExoplanetSystemData
        {
            Planet = new ExoplanetSystemData.PlanetData
            {
                Id = planetData.Id,
                Name = planetData.Name,
                OrbitalRadius = planetData.OrbitalRadius,
                EarthRadius = planetData.EarthRadius ?? 1,
                Texture = planetData.TexturePath,
            },
            Star = new ExoplanetSystemData.StarData
            {
                Id = star.Id,
                Name = star.Name,
                SunRadius = star.SunRadius ?? 1,
                Texture = star.TexturePath,
            }
        };

        await _mainJsModule.InvokeVoidAsync("showExoplanetSystemAsync", systemData, false);

        _exoplanetIterator++;

        if (_exoplanetIterator == planets.Count())
        {
            _exoplanetIterator = 2;
        }
    }

    private async Task ShowSolarSystemAsync()
    {
        await _mainJsModule.InvokeVoidAsync("showSolarSystemAsync", false);
    }
}